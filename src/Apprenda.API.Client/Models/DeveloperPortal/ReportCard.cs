/* 
 * Apprenda.DeveloperPortal.Web
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ApprendaAPIClient.Models.DeveloperPortal
{
    /// <summary>
    /// ReportCard
    /// </summary>
    public partial class ReportCard :  IEquatable<ReportCard>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Started for "Started"
            /// </summary>
            Started,
            
            /// <summary>
            /// Enum Succeeded for "Succeeded"
            /// </summary>
            Succeeded,
            
            /// <summary>
            /// Enum Failed for "Failed"
            /// </summary>
            Failed,
            
            /// <summary>
            /// Enum Canceled for "Canceled"
            /// </summary>
            Canceled
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReportCard" /> class.
        /// </summary>
        /// <param name="Success">Success.</param>
        /// <param name="BeginDate">BeginDate.</param>
        /// <param name="EndDate">EndDate.</param>
        /// <param name="Status">Status.</param>
        /// <param name="Sections">Sections.</param>
        public ReportCard(bool? Success = default(bool?), DateTime? BeginDate = default(DateTime?), DateTime? EndDate = default(DateTime?), StatusEnum? Status = default(StatusEnum?), List<ReportCardSection> Sections = default(List<ReportCardSection>))
        {
            this.Success = Success;
            this.BeginDate = BeginDate;
            this.EndDate = EndDate;
            this.Status = Status;
            this.Sections = Sections;
        }
        
        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        
        public bool? Success { get; set; }
        /// <summary>
        /// Gets or Sets BeginDate
        /// </summary>
        
        public DateTime? BeginDate { get; set; }
        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        
        public DateTime? EndDate { get; set; }
        /// <summary>
        /// Gets or Sets Sections
        /// </summary>
        
        public List<ReportCardSection> Sections { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReportCard {\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  BeginDate: ").Append(BeginDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Sections: ").Append(Sections).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ReportCard);
        }

        /// <summary>
        /// Returns true if ReportCard instances are equal
        /// </summary>
        /// <param name="other">Instance of ReportCard to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReportCard other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Success == other.Success ||
                    this.Success != null &&
                    this.Success.Equals(other.Success)
                ) && 
                (
                    this.BeginDate == other.BeginDate ||
                    this.BeginDate != null &&
                    this.BeginDate.Equals(other.BeginDate)
                ) && 
                (
                    this.EndDate == other.EndDate ||
                    this.EndDate != null &&
                    this.EndDate.Equals(other.EndDate)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Sections == other.Sections ||
                    this.Sections != null &&
                    this.Sections.SequenceEqual(other.Sections)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Success != null)
                    hash = hash * 59 + this.Success.GetHashCode();
                if (this.BeginDate != null)
                    hash = hash * 59 + this.BeginDate.GetHashCode();
                if (this.EndDate != null)
                    hash = hash * 59 + this.EndDate.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Sections != null)
                    hash = hash * 59 + this.Sections.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
