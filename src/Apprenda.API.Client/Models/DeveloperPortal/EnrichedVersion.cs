/* 
 * Apprenda.DeveloperPortal.Web
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ApprendaAPIClient.Models.DeveloperPortal
{
    /// <summary>
    /// EnrichedVersion
    /// </summary>
    public class EnrichedVersion :  IEquatable<EnrichedVersion>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets LoadBalancerUrlConfiguration
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LoadBalancerUrlConfigurationEnum
        {
            
            /// <summary>
            /// Enum Preserve for "Preserve"
            /// </summary>
            Preserve,
            
            /// <summary>
            /// Enum Redirect for "Redirect"
            /// </summary>
            
            Redirect
        }

        /// <summary>
        /// Gets or Sets LoadBalancerUrlConfiguration
        /// </summary>
        public LoadBalancerUrlConfigurationEnum? LoadBalancerUrlConfiguration { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnrichedVersion" /> class.
        /// </summary>
        /// <param name="Url">Url.</param>
        /// <param name="LastHourUptime">LastHourUptime.</param>
        /// <param name="LastDayUptime">LastDayUptime.</param>
        /// <param name="LastMonthUptime">LastMonthUptime.</param>
        /// <param name="PreviousVersion">PreviousVersion.</param>
        /// <param name="Components">Components.</param>
        /// <param name="Workloads">Workloads.</param>
        /// <param name="CustomProperties">CustomProperties.</param>
        /// <param name="ArchiveDownload">ArchiveDownload.</param>
        /// <param name="FilesDownload">FilesDownload.</param>
        /// <param name="ManifestDownload">ManifestDownload.</param>
        /// <param name="Tenants">Tenants.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Alias">Alias.</param>
        /// <param name="Description">Description.</param>
        /// <param name="Stage">Stage.</param>
        /// <param name="State">State.</param>
        /// <param name="Application">Application.</param>
        /// <param name="EnableStickySessions">EnableStickySessions.</param>
        /// <param name="EnableSessionReplication">EnableSessionReplication.</param>
        /// <param name="EnableSslEnforcement">EnableSslEnforcement.</param>
        /// <param name="LoadBalancerUrlConfiguration">LoadBalancerUrlConfiguration.</param>
        /// <param name="InMaintenance">InMaintenance.</param>
        /// <param name="Href">Href.</param>
        public EnrichedVersion(string Url = default(string), double? LastHourUptime = default(double?), double? LastDayUptime = default(double?), double? LastMonthUptime = default(double?), AccountPortal.ResourceBase PreviousVersion = default(AccountPortal.ResourceBase), AccountPortal.ResourceBase Components = default(AccountPortal.ResourceBase), AccountPortal.ResourceBase Workloads = default(AccountPortal.ResourceBase), AccountPortal.ResourceBase CustomProperties = default(AccountPortal.ResourceBase), AccountPortal.ResourceBase ArchiveDownload = default(AccountPortal.ResourceBase), AccountPortal.ResourceBase FilesDownload = default(AccountPortal.ResourceBase), AccountPortal.ResourceBase ManifestDownload = default(AccountPortal.ResourceBase), AccountPortal.ResourceBase Tenants = default(AccountPortal.ResourceBase), string Name = default(string), string Alias = default(string), string Description = default(string), string Stage = default(string), string State = default(string), AccountPortal.ResourceBase Application = default(AccountPortal.ResourceBase), bool? EnableStickySessions = default(bool?), bool? EnableSessionReplication = default(bool?), bool? EnableSslEnforcement = default(bool?), LoadBalancerUrlConfigurationEnum? LoadBalancerUrlConfiguration = default(LoadBalancerUrlConfigurationEnum?), bool? InMaintenance = default(bool?), string Href = default(string))
        {
            this.Url = Url;
            this.LastHourUptime = LastHourUptime;
            this.LastDayUptime = LastDayUptime;
            this.LastMonthUptime = LastMonthUptime;
            this.PreviousVersion = PreviousVersion;
            this.Components = Components;
            this.Workloads = Workloads;
            this.CustomProperties = CustomProperties;
            this.ArchiveDownload = ArchiveDownload;
            this.FilesDownload = FilesDownload;
            this.ManifestDownload = ManifestDownload;
            this.Tenants = Tenants;
            this.Name = Name;
            this.Alias = Alias;
            this.Description = Description;
            this.Stage = Stage;
            this.State = State;
            this.Application = Application;
            this.EnableStickySessions = EnableStickySessions;
            this.EnableSessionReplication = EnableSessionReplication;
            this.EnableSslEnforcement = EnableSslEnforcement;
            this.LoadBalancerUrlConfiguration = LoadBalancerUrlConfiguration;
            this.InMaintenance = InMaintenance;
            this.Href = Href;
        }
        
        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        public string Url { get; set; }
        /// <summary>
        /// Gets or Sets LastHourUptime
        /// </summary>
        public double? LastHourUptime { get; set; }
        /// <summary>
        /// Gets or Sets LastDayUptime
        /// </summary>
        public double? LastDayUptime { get; set; }
        /// <summary>
        /// Gets or Sets LastMonthUptime
        /// </summary>
        
        public double? LastMonthUptime { get; set; }
        /// <summary>
        /// Gets or Sets PreviousVersion
        /// </summary>
        
        public AccountPortal.ResourceBase PreviousVersion { get; set; }
        /// <summary>
        /// Gets or Sets Components
        /// </summary>
        
        public AccountPortal.ResourceBase Components { get; set; }
        /// <summary>
        /// Gets or Sets Workloads
        /// </summary>
        
        public AccountPortal.ResourceBase Workloads { get; set; }
        /// <summary>
        /// Gets or Sets CustomProperties
        /// </summary>
        
        public AccountPortal.ResourceBase CustomProperties { get; set; }
        /// <summary>
        /// Gets or Sets ArchiveDownload
        /// </summary>
        
        public AccountPortal.ResourceBase ArchiveDownload { get; set; }
        /// <summary>
        /// Gets or Sets FilesDownload
        /// </summary>
        
        public AccountPortal.ResourceBase FilesDownload { get; set; }
        /// <summary>
        /// Gets or Sets ManifestDownload
        /// </summary>
        
        public AccountPortal.ResourceBase ManifestDownload { get; set; }
        /// <summary>
        /// Gets or Sets Tenants
        /// </summary>
        
        public AccountPortal.ResourceBase Tenants { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Alias
        /// </summary>
        
        public string Alias { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets Stage
        /// </summary>
        
        public string Stage { get; set; }
        /// <summary>
        /// Gets or Sets State
        /// </summary>
        
        public string State { get; set; }
        /// <summary>
        /// Gets or Sets Application
        /// </summary>
        
        public AccountPortal.ResourceBase Application { get; set; }
        /// <summary>
        /// Gets or Sets EnableStickySessions
        /// </summary>
        
        public bool? EnableStickySessions { get; set; }
        /// <summary>
        /// Gets or Sets EnableSessionReplication
        /// </summary>
        
        public bool? EnableSessionReplication { get; set; }
        /// <summary>
        /// Gets or Sets EnableSslEnforcement
        /// </summary>
        
        public bool? EnableSslEnforcement { get; set; }
        /// <summary>
        /// Gets or Sets InMaintenance
        /// </summary>
        
        public bool? InMaintenance { get; set; }
        /// <summary>
        /// Gets or Sets Href
        /// </summary>
        
        public string Href { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnrichedVersion {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  LastHourUptime: ").Append(LastHourUptime).Append("\n");
            sb.Append("  LastDayUptime: ").Append(LastDayUptime).Append("\n");
            sb.Append("  LastMonthUptime: ").Append(LastMonthUptime).Append("\n");
            sb.Append("  PreviousVersion: ").Append(PreviousVersion).Append("\n");
            sb.Append("  Components: ").Append(Components).Append("\n");
            sb.Append("  Workloads: ").Append(Workloads).Append("\n");
            sb.Append("  CustomProperties: ").Append(CustomProperties).Append("\n");
            sb.Append("  ArchiveDownload: ").Append(ArchiveDownload).Append("\n");
            sb.Append("  FilesDownload: ").Append(FilesDownload).Append("\n");
            sb.Append("  ManifestDownload: ").Append(ManifestDownload).Append("\n");
            sb.Append("  Tenants: ").Append(Tenants).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Stage: ").Append(Stage).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Application: ").Append(Application).Append("\n");
            sb.Append("  EnableStickySessions: ").Append(EnableStickySessions).Append("\n");
            sb.Append("  EnableSessionReplication: ").Append(EnableSessionReplication).Append("\n");
            sb.Append("  EnableSslEnforcement: ").Append(EnableSslEnforcement).Append("\n");
            sb.Append("  LoadBalancerUrlConfiguration: ").Append(LoadBalancerUrlConfiguration).Append("\n");
            sb.Append("  InMaintenance: ").Append(InMaintenance).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as EnrichedVersion);
        }

        /// <summary>
        /// Returns true if EnrichedVersion instances are equal
        /// </summary>
        /// <param name="other">Instance of EnrichedVersion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnrichedVersion other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Url == other.Url ||
                    this.Url != null &&
                    this.Url.Equals(other.Url)
                ) && 
                (
                    this.LastHourUptime == other.LastHourUptime ||
                    this.LastHourUptime != null &&
                    this.LastHourUptime.Equals(other.LastHourUptime)
                ) && 
                (
                    this.LastDayUptime == other.LastDayUptime ||
                    this.LastDayUptime != null &&
                    this.LastDayUptime.Equals(other.LastDayUptime)
                ) && 
                (
                    this.LastMonthUptime == other.LastMonthUptime ||
                    this.LastMonthUptime != null &&
                    this.LastMonthUptime.Equals(other.LastMonthUptime)
                ) && 
                (
                    this.PreviousVersion == other.PreviousVersion ||
                    this.PreviousVersion != null &&
                    this.PreviousVersion.Equals(other.PreviousVersion)
                ) && 
                (
                    this.Components == other.Components ||
                    this.Components != null &&
                    this.Components.Equals(other.Components)
                ) && 
                (
                    this.Workloads == other.Workloads ||
                    this.Workloads != null &&
                    this.Workloads.Equals(other.Workloads)
                ) && 
                (
                    this.CustomProperties == other.CustomProperties ||
                    this.CustomProperties != null &&
                    this.CustomProperties.Equals(other.CustomProperties)
                ) && 
                (
                    this.ArchiveDownload == other.ArchiveDownload ||
                    this.ArchiveDownload != null &&
                    this.ArchiveDownload.Equals(other.ArchiveDownload)
                ) && 
                (
                    this.FilesDownload == other.FilesDownload ||
                    this.FilesDownload != null &&
                    this.FilesDownload.Equals(other.FilesDownload)
                ) && 
                (
                    this.ManifestDownload == other.ManifestDownload ||
                    this.ManifestDownload != null &&
                    this.ManifestDownload.Equals(other.ManifestDownload)
                ) && 
                (
                    this.Tenants == other.Tenants ||
                    this.Tenants != null &&
                    this.Tenants.Equals(other.Tenants)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Alias == other.Alias ||
                    this.Alias != null &&
                    this.Alias.Equals(other.Alias)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Stage == other.Stage ||
                    this.Stage != null &&
                    this.Stage.Equals(other.Stage)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.Application == other.Application ||
                    this.Application != null &&
                    this.Application.Equals(other.Application)
                ) && 
                (
                    this.EnableStickySessions == other.EnableStickySessions ||
                    this.EnableStickySessions != null &&
                    this.EnableStickySessions.Equals(other.EnableStickySessions)
                ) && 
                (
                    this.EnableSessionReplication == other.EnableSessionReplication ||
                    this.EnableSessionReplication != null &&
                    this.EnableSessionReplication.Equals(other.EnableSessionReplication)
                ) && 
                (
                    this.EnableSslEnforcement == other.EnableSslEnforcement ||
                    this.EnableSslEnforcement != null &&
                    this.EnableSslEnforcement.Equals(other.EnableSslEnforcement)
                ) && 
                (
                    this.LoadBalancerUrlConfiguration == other.LoadBalancerUrlConfiguration ||
                    this.LoadBalancerUrlConfiguration != null &&
                    this.LoadBalancerUrlConfiguration.Equals(other.LoadBalancerUrlConfiguration)
                ) && 
                (
                    this.InMaintenance == other.InMaintenance ||
                    this.InMaintenance != null &&
                    this.InMaintenance.Equals(other.InMaintenance)
                ) && 
                (
                    this.Href == other.Href ||
                    this.Href != null &&
                    this.Href.Equals(other.Href)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Url != null)
                    hash = hash * 59 + this.Url.GetHashCode();
                if (this.LastHourUptime != null)
                    hash = hash * 59 + this.LastHourUptime.GetHashCode();
                if (this.LastDayUptime != null)
                    hash = hash * 59 + this.LastDayUptime.GetHashCode();
                if (this.LastMonthUptime != null)
                    hash = hash * 59 + this.LastMonthUptime.GetHashCode();
                if (this.PreviousVersion != null)
                    hash = hash * 59 + this.PreviousVersion.GetHashCode();
                if (this.Components != null)
                    hash = hash * 59 + this.Components.GetHashCode();
                if (this.Workloads != null)
                    hash = hash * 59 + this.Workloads.GetHashCode();
                if (this.CustomProperties != null)
                    hash = hash * 59 + this.CustomProperties.GetHashCode();
                if (this.ArchiveDownload != null)
                    hash = hash * 59 + this.ArchiveDownload.GetHashCode();
                if (this.FilesDownload != null)
                    hash = hash * 59 + this.FilesDownload.GetHashCode();
                if (this.ManifestDownload != null)
                    hash = hash * 59 + this.ManifestDownload.GetHashCode();
                if (this.Tenants != null)
                    hash = hash * 59 + this.Tenants.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Alias != null)
                    hash = hash * 59 + this.Alias.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Stage != null)
                    hash = hash * 59 + this.Stage.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.Application != null)
                    hash = hash * 59 + this.Application.GetHashCode();
                if (this.EnableStickySessions != null)
                    hash = hash * 59 + this.EnableStickySessions.GetHashCode();
                if (this.EnableSessionReplication != null)
                    hash = hash * 59 + this.EnableSessionReplication.GetHashCode();
                if (this.EnableSslEnforcement != null)
                    hash = hash * 59 + this.EnableSslEnforcement.GetHashCode();
                if (this.LoadBalancerUrlConfiguration != null)
                    hash = hash * 59 + this.LoadBalancerUrlConfiguration.GetHashCode();
                if (this.InMaintenance != null)
                    hash = hash * 59 + this.InMaintenance.GetHashCode();
                if (this.Href != null)
                    hash = hash * 59 + this.Href.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
